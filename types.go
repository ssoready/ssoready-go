// This file was auto-generated by Fern from our API Definition.

package ssoready

import (
	json "encoding/json"
	fmt "fmt"
	core "github.com/ssoready/ssoready-go/core"
)

type CreateOrganizationResponse struct {
	// The created organization.
	Organization *Organization `json:"organization,omitempty" url:"organization,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateOrganizationResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateOrganizationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateOrganizationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateOrganizationResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateOrganizationResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateSAMLConnectionResponse struct {
	// The created SAML connection.
	SAMLConnection *SAMLConnection `json:"samlConnection,omitempty" url:"samlConnection,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateSAMLConnectionResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateSAMLConnectionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateSAMLConnectionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateSAMLConnectionResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateSAMLConnectionResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateSCIMDirectoryResponse struct {
	// The updated SCIM directory.
	SCIMDirectory *SCIMDirectory `json:"scimDirectory,omitempty" url:"scimDirectory,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateSCIMDirectoryResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateSCIMDirectoryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateSCIMDirectoryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateSCIMDirectoryResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateSCIMDirectoryResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type CreateSetupURLResponse struct {
	// The one-time, short-lived self-serve setup URL.
	//
	// Do not log or store this URL. Because this URL is one-time, loading it yourself means your customer will not be
	// able to load it after you.
	URL *string `json:"url,omitempty" url:"url,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (c *CreateSetupURLResponse) GetExtraProperties() map[string]interface{} {
	return c.extraProperties
}

func (c *CreateSetupURLResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler CreateSetupURLResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*c = CreateSetupURLResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *c)
	if err != nil {
		return err
	}
	c.extraProperties = extraProperties

	c._rawJSON = json.RawMessage(data)
	return nil
}

func (c *CreateSetupURLResponse) String() string {
	if len(c._rawJSON) > 0 {
		if value, err := core.StringifyJSON(c._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(c); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", c)
}

type GetOrganizationResponse struct {
	// The requested organization.
	Organization *Organization `json:"organization,omitempty" url:"organization,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetOrganizationResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetOrganizationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetOrganizationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetOrganizationResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetOrganizationResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetSAMLConnectionResponse struct {
	// The requested SAML connection.
	SAMLConnection *SAMLConnection `json:"samlConnection,omitempty" url:"samlConnection,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetSAMLConnectionResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetSAMLConnectionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetSAMLConnectionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetSAMLConnectionResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetSAMLConnectionResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetSAMLRedirectURLResponse struct {
	// Redirect your user to this URL to start a SAML login.
	RedirectURL *string `json:"redirectUrl,omitempty" url:"redirectUrl,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetSAMLRedirectURLResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetSAMLRedirectURLResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetSAMLRedirectURLResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetSAMLRedirectURLResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetSAMLRedirectURLResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetSCIMDirectoryResponse struct {
	// The requested SCIM directory.
	SCIMDirectory *SCIMDirectory `json:"scimDirectory,omitempty" url:"scimDirectory,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetSCIMDirectoryResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetSCIMDirectoryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetSCIMDirectoryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetSCIMDirectoryResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetSCIMDirectoryResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetSCIMGroupResponse struct {
	// The requested SCIM group.
	SCIMGroup *SCIMGroup `json:"scimGroup,omitempty" url:"scimGroup,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetSCIMGroupResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetSCIMGroupResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetSCIMGroupResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetSCIMGroupResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetSCIMGroupResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type GetSCIMUserResponse struct {
	// The requested SCIM user.
	SCIMUser *SCIMUser `json:"scimUser,omitempty" url:"scimUser,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (g *GetSCIMUserResponse) GetExtraProperties() map[string]interface{} {
	return g.extraProperties
}

func (g *GetSCIMUserResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler GetSCIMUserResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*g = GetSCIMUserResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.extraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GetSCIMUserResponse) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

// Contains an arbitrary serialized message along with a @type that describes the type of the serialized message.
type GoogleProtobufAny struct {
	// The type of the serialized message.
	Type *string `json:"@type,omitempty" url:"@type,omitempty"`

	ExtraProperties map[string]interface{} `json:"-" url:"-"`

	_rawJSON json.RawMessage
}

func (g *GoogleProtobufAny) GetExtraProperties() map[string]interface{} {
	return g.ExtraProperties
}

func (g *GoogleProtobufAny) UnmarshalJSON(data []byte) error {
	type embed GoogleProtobufAny
	var unmarshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	if err := json.Unmarshal(data, &unmarshaler); err != nil {
		return err
	}
	*g = GoogleProtobufAny(unmarshaler.embed)

	extraProperties, err := core.ExtractExtraProperties(data, *g)
	if err != nil {
		return err
	}
	g.ExtraProperties = extraProperties

	g._rawJSON = json.RawMessage(data)
	return nil
}

func (g *GoogleProtobufAny) MarshalJSON() ([]byte, error) {
	type embed GoogleProtobufAny
	var marshaler = struct {
		embed
	}{
		embed: embed(*g),
	}
	return core.MarshalJSONWithExtraProperties(marshaler, g.ExtraProperties)
}

func (g *GoogleProtobufAny) String() string {
	if len(g._rawJSON) > 0 {
		if value, err := core.StringifyJSON(g._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(g); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", g)
}

type ListOrganizationsResponse struct {
	// List of organizations.
	Organizations []*Organization `json:"organizations,omitempty" url:"organizations,omitempty"`
	// Value to use as `pageToken` for the next page of data. Empty if there is no more data.
	NextPageToken *string `json:"nextPageToken,omitempty" url:"nextPageToken,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListOrganizationsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListOrganizationsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListOrganizationsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListOrganizationsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListOrganizationsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListSAMLConnectionsResponse struct {
	// The list of SAML connections.
	SAMLConnections []*SAMLConnection `json:"samlConnections,omitempty" url:"samlConnections,omitempty"`
	// Value to use as `pageToken` for the next page of data. Empty if there is no more data.
	NextPageToken *string `json:"nextPageToken,omitempty" url:"nextPageToken,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListSAMLConnectionsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListSAMLConnectionsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListSAMLConnectionsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListSAMLConnectionsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListSAMLConnectionsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListSCIMDirectoriesResponse struct {
	// The list of SCIM directories.
	SCIMDirectories []*SCIMDirectory `json:"scimDirectories,omitempty" url:"scimDirectories,omitempty"`
	// Value to use as `pageToken` for the next page of data. Empty if there is no more data.
	NextPageToken *string `json:"nextPageToken,omitempty" url:"nextPageToken,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListSCIMDirectoriesResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListSCIMDirectoriesResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListSCIMDirectoriesResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListSCIMDirectoriesResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListSCIMDirectoriesResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListSCIMGroupsResponse struct {
	// List of SCIM groups.
	SCIMGroups []*SCIMGroup `json:"scimGroups,omitempty" url:"scimGroups,omitempty"`
	// Value to use as `pageToken` for the next page of data. Empty if there is no more data.
	NextPageToken *string `json:"nextPageToken,omitempty" url:"nextPageToken,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListSCIMGroupsResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListSCIMGroupsResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListSCIMGroupsResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListSCIMGroupsResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListSCIMGroupsResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type ListSCIMUsersResponse struct {
	// List of SCIM users.
	SCIMUsers []*SCIMUser `json:"scimUsers,omitempty" url:"scimUsers,omitempty"`
	// Value to use as `pageToken` for the next page of data. Empty if there is no more data.
	NextPageToken *string `json:"nextPageToken,omitempty" url:"nextPageToken,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (l *ListSCIMUsersResponse) GetExtraProperties() map[string]interface{} {
	return l.extraProperties
}

func (l *ListSCIMUsersResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler ListSCIMUsersResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*l = ListSCIMUsersResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *l)
	if err != nil {
		return err
	}
	l.extraProperties = extraProperties

	l._rawJSON = json.RawMessage(data)
	return nil
}

func (l *ListSCIMUsersResponse) String() string {
	if len(l._rawJSON) > 0 {
		if value, err := core.StringifyJSON(l._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(l); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", l)
}

type Organization struct {
	// Unique identifier for this organization.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The environment this organization belongs to.
	EnvironmentID *string `json:"environmentId,omitempty" url:"environmentId,omitempty"`
	// An optional human-friendly name for this organization.
	DisplayName *string `json:"displayName,omitempty" url:"displayName,omitempty"`
	// An identifier you can attach to an organization. Meant to be used to correlate an SSOReady organization to your
	// internal equivalent concept.
	//
	// External IDs are unique within an environment. No two organizations in the same environment can have
	// the same external ID.
	ExternalID *string `json:"externalId,omitempty" url:"externalId,omitempty"`
	// A list of domains that users from this organization use.
	//
	// SAML connections and SCIM directories within this organization will only produce users whose email are included in
	// `domains`. SSOReady will reject SAML and SCIM users that do not fall within `domains`.
	Domains []string `json:"domains,omitempty" url:"domains,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (o *Organization) GetExtraProperties() map[string]interface{} {
	return o.extraProperties
}

func (o *Organization) UnmarshalJSON(data []byte) error {
	type unmarshaler Organization
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*o = Organization(value)

	extraProperties, err := core.ExtractExtraProperties(data, *o)
	if err != nil {
		return err
	}
	o.extraProperties = extraProperties

	o._rawJSON = json.RawMessage(data)
	return nil
}

func (o *Organization) String() string {
	if len(o._rawJSON) > 0 {
		if value, err := core.StringifyJSON(o._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(o); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", o)
}

type RedeemSAMLAccessCodeResponse struct {
	// The user's email address.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// The `state` you provided when getting a SAML initiation URL, if any.
	//
	// If your user logged in to your product using Identity Provider-initiated SAML (e.g. they clicked on your app inside
	// their corporate Okta dashboard), then `state` will be empty.
	//
	// SSOReady validates the authenticity of non-empty `state` values. You do not need to implement your own CSRF on top
	// of it, but doing so anyway will have no bad consequences.
	State *string `json:"state,omitempty" url:"state,omitempty"`
	// Arbitrary key-value pairs the Identity Provider included about the user.
	//
	// Typically, these `attributes` are used to pass along the user's first/last name, or whether they should be
	// considered an admin within their company.
	Attributes map[string]string `json:"attributes,omitempty" url:"attributes,omitempty"`
	// The ID of the organization this user belongs to.
	OrganizationID *string `json:"organizationId,omitempty" url:"organizationId,omitempty"`
	// The `externalId`, if any, of the organization this user belongs to.
	OrganizationExternalID *string `json:"organizationExternalId,omitempty" url:"organizationExternalId,omitempty"`
	// A unique identifier of this particular SAML login. It is not a secret. You can safely log it.
	//
	// SSOReady maintains an audit log of every SAML login. Use this SAML flow ID to find this login in the audit logs.
	SAMLFlowID *string `json:"samlFlowId,omitempty" url:"samlFlowId,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RedeemSAMLAccessCodeResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RedeemSAMLAccessCodeResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RedeemSAMLAccessCodeResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RedeemSAMLAccessCodeResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RedeemSAMLAccessCodeResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type RotateSCIMDirectoryBearerTokenResponse struct {
	// The new, updated bearer token.
	//
	// Do not log or store this bearer token. It is an authentication token that your customer should securely input into
	// their Identity Provider.
	BearerToken *string `json:"bearerToken,omitempty" url:"bearerToken,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (r *RotateSCIMDirectoryBearerTokenResponse) GetExtraProperties() map[string]interface{} {
	return r.extraProperties
}

func (r *RotateSCIMDirectoryBearerTokenResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler RotateSCIMDirectoryBearerTokenResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*r = RotateSCIMDirectoryBearerTokenResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *r)
	if err != nil {
		return err
	}
	r.extraProperties = extraProperties

	r._rawJSON = json.RawMessage(data)
	return nil
}

func (r *RotateSCIMDirectoryBearerTokenResponse) String() string {
	if len(r._rawJSON) > 0 {
		if value, err := core.StringifyJSON(r._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(r); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", r)
}

type SAMLConnection struct {
	// Unique identifier for this SAML connection.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The organization this SAML connection belongs to.
	OrganizationID *string `json:"organizationId,omitempty" url:"organizationId,omitempty"`
	// Whether this is the primary SAML connection for the organization.
	Primary *bool `json:"primary,omitempty" url:"primary,omitempty"`
	// URL to redirect to when initiating SAML flows.
	//
	// IDP redirect URLs are assigned by an Identity Provider, and need to be inputted into SSOReady.
	IdpRedirectURL *string `json:"idpRedirectUrl,omitempty" url:"idpRedirectUrl,omitempty"`
	// Certificate to authenticate SAML assertions. This is a PEM-encoded X.509 certificate.
	//
	// IDP certificates are assigned by an Identity Provider, and need to be inputted into SSOReady.
	IdpCertificate *string `json:"idpCertificate,omitempty" url:"idpCertificate,omitempty"`
	// Identifier for the identity provider when handling SAML operations.
	//
	// IDP entity IDs are assigned by an Identity Provider, and need to be inputted into SSOReady.
	IdpEntityID *string `json:"idpEntityId,omitempty" url:"idpEntityId,omitempty"`
	// Identifier for the SAML connection when handling SAML operations.
	//
	// SP entity IDs are assigned by SSOReady, and need to be inputted into your customer's Identity Provider.
	SpEntityID *string `json:"spEntityId,omitempty" url:"spEntityId,omitempty"`
	// URL the Identity Provider redirects to when transmitting SAML assertions. Stands for "Service Provider Assertion
	// Consumer Service" URL.
	//
	// SP ACS URLs are assigned by SSOReady, and need to be inputted into your customer's Identity Provider.
	SpAcsURL *string `json:"spAcsUrl,omitempty" url:"spAcsUrl,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SAMLConnection) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SAMLConnection) UnmarshalJSON(data []byte) error {
	type unmarshaler SAMLConnection
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SAMLConnection(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SAMLConnection) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SCIMDirectory struct {
	// Unique identifier for this SCIM directory.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// The organization this SCIM directory belongs to.
	OrganizationID *string `json:"organizationId,omitempty" url:"organizationId,omitempty"`
	// Whether this is the primary SCIM directory for the organization.
	Primary *bool `json:"primary,omitempty" url:"primary,omitempty"`
	// Base URL the Identity Provider uses to perform SCIM HTTP requests.
	//
	// SCIM base URLs are assigned by SSOReady, and need to be inputted into your customer's Identity Provider.
	SCIMBaseURL *string `json:"scimBaseUrl,omitempty" url:"scimBaseUrl,omitempty"`
	// Whether this SCIM directory has a bearer token assigned.
	//
	// SSOReady only stores a hash of the bearer token. To get a bearer token value, you must rotate this SCIM directory's
	// bearer token.
	HasClientBearerToken *bool `json:"hasClientBearerToken,omitempty" url:"hasClientBearerToken,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SCIMDirectory) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SCIMDirectory) UnmarshalJSON(data []byte) error {
	type unmarshaler SCIMDirectory
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SCIMDirectory(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SCIMDirectory) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SCIMGroup struct {
	// Unique identifier for this SCIM group.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// SCIM directory this SCIM group belongs to.
	SCIMDirectoryID *string `json:"scimDirectoryId,omitempty" url:"scimDirectoryId,omitempty"`
	// A human-friendly name for the SCIM group.
	DisplayName *string `json:"displayName,omitempty" url:"displayName,omitempty"`
	// Whether the SCIM group has been deleted or deprovisioned from its SCIM directory.
	//
	// Identity Providers are inconsistent about reliably deleting SCIM groups. Many Identity Providers will deprovision
	// the users inside a group, but not the group itself. For this reason, it's typical to ignore this field until a
	// specific need arises.
	Deleted *bool `json:"deleted,omitempty" url:"deleted,omitempty"`
	// Arbitrary, potentially nested, attributes the Identity Provider included about the group.
	//
	// Identity Providers are inconsistent about supporting sending custom attributes on groups. For this reason, it's
	// typical to not rely on them until a specific need arises.
	Attributes map[string]interface{} `json:"attributes,omitempty" url:"attributes,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SCIMGroup) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SCIMGroup) UnmarshalJSON(data []byte) error {
	type unmarshaler SCIMGroup
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SCIMGroup(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SCIMGroup) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type SCIMUser struct {
	// Unique identifier for this SCIM user.
	ID *string `json:"id,omitempty" url:"id,omitempty"`
	// SCIM directory this SCIM user belongs to.
	SCIMDirectoryID *string `json:"scimDirectoryId,omitempty" url:"scimDirectoryId,omitempty"`
	// The SCIM user's email address.
	Email *string `json:"email,omitempty" url:"email,omitempty"`
	// Whether the SCIM user has been deleted or deprovisioned from its SCIM directory.
	Deleted *bool `json:"deleted,omitempty" url:"deleted,omitempty"`
	// Arbitrary, potentially nested, attributes the Identity Provider included about the user.
	//
	// Typically, these `attributes` are used to pass along the user's first/last name, or whether they should be
	// considered an admin within their company.
	Attributes map[string]interface{} `json:"attributes,omitempty" url:"attributes,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *SCIMUser) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *SCIMUser) UnmarshalJSON(data []byte) error {
	type unmarshaler SCIMUser
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = SCIMUser(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *SCIMUser) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

// The `Status` type defines a logical error model that is suitable for different programming environments, including REST APIs and RPC APIs. It is used by [gRPC](https://github.com/grpc). Each `Status` message contains three pieces of data: error code, error message, and error details. You can find out more about this error model and how to work with it in the [API Design Guide](https://cloud.google.com/apis/design/errors).
type Status struct {
	// The status code, which should be an enum value of [google.rpc.Code][google.rpc.code].
	Code *int `json:"code,omitempty" url:"code,omitempty"`
	// A developer-facing error message, which should be in English. Any user-facing error message should be localized and sent in the [google.rpc.Status.details][google.rpc.status.details] field, or localized by the client.
	Message *string `json:"message,omitempty" url:"message,omitempty"`
	// A list of messages that carry the error details. There is a common set of message types for APIs to use.
	Details []*GoogleProtobufAny `json:"details,omitempty" url:"details,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (s *Status) GetExtraProperties() map[string]interface{} {
	return s.extraProperties
}

func (s *Status) UnmarshalJSON(data []byte) error {
	type unmarshaler Status
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*s = Status(value)

	extraProperties, err := core.ExtractExtraProperties(data, *s)
	if err != nil {
		return err
	}
	s.extraProperties = extraProperties

	s._rawJSON = json.RawMessage(data)
	return nil
}

func (s *Status) String() string {
	if len(s._rawJSON) > 0 {
		if value, err := core.StringifyJSON(s._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(s); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", s)
}

type UpdateOrganizationResponse struct {
	// The updated organization.
	Organization *Organization `json:"organization,omitempty" url:"organization,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateOrganizationResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateOrganizationResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateOrganizationResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateOrganizationResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateOrganizationResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateSAMLConnectionResponse struct {
	// The updated SAML connection.
	SAMLConnection *SAMLConnection `json:"samlConnection,omitempty" url:"samlConnection,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateSAMLConnectionResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateSAMLConnectionResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateSAMLConnectionResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateSAMLConnectionResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateSAMLConnectionResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}

type UpdateSCIMDirectoryResponse struct {
	// The updated SCIM directory.
	SCIMDirectory *SCIMDirectory `json:"scimDirectory,omitempty" url:"scimDirectory,omitempty"`

	extraProperties map[string]interface{}
	_rawJSON        json.RawMessage
}

func (u *UpdateSCIMDirectoryResponse) GetExtraProperties() map[string]interface{} {
	return u.extraProperties
}

func (u *UpdateSCIMDirectoryResponse) UnmarshalJSON(data []byte) error {
	type unmarshaler UpdateSCIMDirectoryResponse
	var value unmarshaler
	if err := json.Unmarshal(data, &value); err != nil {
		return err
	}
	*u = UpdateSCIMDirectoryResponse(value)

	extraProperties, err := core.ExtractExtraProperties(data, *u)
	if err != nil {
		return err
	}
	u.extraProperties = extraProperties

	u._rawJSON = json.RawMessage(data)
	return nil
}

func (u *UpdateSCIMDirectoryResponse) String() string {
	if len(u._rawJSON) > 0 {
		if value, err := core.StringifyJSON(u._rawJSON); err == nil {
			return value
		}
	}
	if value, err := core.StringifyJSON(u); err == nil {
		return value
	}
	return fmt.Sprintf("%#v", u)
}
