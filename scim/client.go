// This file was auto-generated by Fern from our API Definition.

package scim

import (
	context "context"
	ssoreadygo "github.com/ssoready/ssoready-go"
	core "github.com/ssoready/ssoready-go/core"
	option "github.com/ssoready/ssoready-go/option"
	http "net/http"
	os "os"
)

type Client struct {
	baseURL string
	caller  *core.Caller
	header  http.Header
}

func NewClient(opts ...option.RequestOption) *Client {
	options := core.NewRequestOptions(opts...)
	if options.APIKey == "" {
		options.APIKey = os.Getenv("SSOREADY_API_KEY")
	}
	return &Client{
		baseURL: options.BaseURL,
		caller: core.NewCaller(
			&core.CallerParams{
				Client:      options.HTTPClient,
				MaxAttempts: options.MaxAttempts,
			},
		),
		header: options.ToHeader(),
	}
}

// Gets a list of SCIM groups in a SCIM directory.
func (c *Client) ListScimGroups(
	ctx context.Context,
	request *ssoreadygo.ScimListScimGroupsRequest,
	opts ...option.RequestOption,
) (*ssoreadygo.ListScimGroupsResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.ssoready.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v1/scim/groups"

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *ssoreadygo.ListScimGroupsResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Gets a SCIM group in a SCIM directory.
func (c *Client) GetScimGroup(
	ctx context.Context,
	// ID of the SCIM group to get.
	id string,
	opts ...option.RequestOption,
) (*ssoreadygo.GetScimGroupResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.ssoready.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v1/scim/groups/%v", id)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *ssoreadygo.GetScimGroupResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Gets a list of SCIM users in a SCIM directory.
func (c *Client) ListScimUsers(
	ctx context.Context,
	request *ssoreadygo.ScimListScimUsersRequest,
	opts ...option.RequestOption,
) (*ssoreadygo.ListScimUsersResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.ssoready.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := baseURL + "/v1/scim/users"

	queryParams, err := core.QueryValues(request)
	if err != nil {
		return nil, err
	}
	if len(queryParams) > 0 {
		endpointURL += "?" + queryParams.Encode()
	}

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *ssoreadygo.ListScimUsersResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}

// Gets a SCIM user.
func (c *Client) GetScimUser(
	ctx context.Context,
	// ID of the SCIM user to get.
	id string,
	opts ...option.RequestOption,
) (*ssoreadygo.GetScimUserResponse, error) {
	options := core.NewRequestOptions(opts...)

	baseURL := "https://api.ssoready.com"
	if c.baseURL != "" {
		baseURL = c.baseURL
	}
	if options.BaseURL != "" {
		baseURL = options.BaseURL
	}
	endpointURL := core.EncodeURL(baseURL+"/v1/scim/users/%v", id)

	headers := core.MergeHeaders(c.header.Clone(), options.ToHeader())

	var response *ssoreadygo.GetScimUserResponse
	if err := c.caller.Call(
		ctx,
		&core.CallParams{
			URL:             endpointURL,
			Method:          http.MethodGet,
			MaxAttempts:     options.MaxAttempts,
			Headers:         headers,
			BodyProperties:  options.BodyProperties,
			QueryParameters: options.QueryParameters,
			Client:          options.HTTPClient,
			Response:        &response,
		},
	); err != nil {
		return nil, err
	}
	return response, nil
}
